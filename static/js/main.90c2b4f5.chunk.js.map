{"version":3,"sources":["components/Todo.js","components/Todolist.js","App.js","reportWebVitals.js","index.js"],"names":["Buttonstyled","styled","Button","p","isComplete","css","Todo","atodo","onCheckBtnClick","shouldFitContainer","iconAfter","className","onClick","id","primaryColor","name","Todolist","todoList","map","todo","TODO_APP_Storage_key","App","useState","todolist","setTodolist","textinput","setTextinput","useEffect","storagedtodolist","localStorage","getItem","JSON","parse","setItem","stringify","onTextinputChange","useCallback","e","target","value","onAddBtnClick","v4","prevState","style","width","placeholder","elemAfterInput","isDisabled","appearance","padding","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSAKMA,EAAeC,YAAOC,IAAPD,CAAH,oVAGD,SAAAE,GAAC,OAAIA,EAAEC,YAAcC,YAAhB,mEAkCPC,MAdf,YAA2C,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,gBACnB,OACI,mCACI,cAACR,EAAD,CACII,WAAYG,EAAMH,WAClBK,oBAAkB,EAClBC,WAAYH,EAAMH,YACd,sBAAMO,UAAU,aAAaC,QAAS,kBAAMJ,EAAgBD,EAAMM,KAAlE,SACI,cAAC,IAAD,CAAWC,aAAa,cALpC,SAMkBP,EAAMQ,UCrBrBC,MAVf,YAAkD,IAA9BC,EAA6B,EAA7BA,SAAUT,EAAmB,EAAnBA,gBAC1B,OACI,mCACKS,EAASC,KAAI,SAAAC,GAAI,OACd,cAAC,EAAD,CAAoBZ,MAAOY,EAAMX,gBAAiBA,GAAvCW,EAAKN,U,gBCH1BO,EAAuB,WA0DdC,MAxDf,WAEE,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACAC,qBAAU,WACR,IAAMC,EAAmBC,aAAaC,QAAQV,GAC1CQ,GACFJ,EAAYO,KAAKC,MAAMJ,MAExB,IAEHD,qBAAU,WACRE,aAAaI,QAAQb,EAAsBW,KAAKG,UAAUX,MACzD,CAACA,IAIJ,IAAMY,EAAoBC,uBAAY,SAACC,GACrCX,EAAaW,EAAEC,OAAOC,SACtB,IAEIC,EAAgBJ,uBAAY,SAACC,GAEjCb,EAAY,CAAC,CAAEX,GAAI4B,cAAM1B,KAAMU,EAAWrB,YAAY,IAA3C,mBAAsDmB,KACjEG,EAAa,MAEb,CAACD,EAAUF,IAGPf,EAAkB4B,uBAAY,SAACvB,GACnCW,GAAY,SAAAkB,GAAS,OAAIA,EAAUxB,KAAI,SAAAC,GAAI,OAAIA,EAAKN,KAAOA,EAAZ,2BAAmBM,GAAnB,IAAyBf,YAAY,IAAMe,UAC1F,IAEF,OACE,qCACE,oBAAIwB,MAAO,CAACC,MAAM,SAAlB,0CACA,cAAC,IAAD,CACE7B,KAAK,WACL8B,YAAY,uCACZC,eACE,cAAC,IAAD,CACEC,YAAatB,EACbuB,WAAW,UACXpC,QAAS4B,EAHX,qBAOFnC,IAAK,CAAE4C,QAAS,eAChBV,MAAOd,EACPyB,SAAUf,IAEZ,cAAC,EAAD,CAAUlB,SAAUM,EAAUf,gBAAiBA,QChDtC2C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.90c2b4f5.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from '@atlaskit/button';\r\nimport styled, { css } from 'styled-components';\r\nimport CheckIcon from '@atlaskit/icon/glyph/check';\r\n\r\nconst Buttonstyled = styled(Button)`\r\n    margin-top: 5px;\r\n    text-align: left;\r\n    &, &:hover{${p => p.isComplete && css`\r\n    text-decoration: line-through;\r\n`}}\r\n    \r\n\r\n    &:hover{\r\n        .check-icon{\r\n        display: inline-block;\r\n        }\r\n    }\r\n\r\n    .check-icon{\r\n        display:none;\r\n        &:hover{\r\n            background-color: #e2e2e2;\r\n            border-radius: 3px;\r\n        }\r\n    }\r\n`;\r\n\r\nfunction Todo({ atodo, onCheckBtnClick }) {\r\n    return (\r\n        <>\r\n            <Buttonstyled\r\n                isComplete={atodo.isComplete}\r\n                shouldFitContainer\r\n                iconAfter={!atodo.isComplete&&\r\n                    <span className=\"check-icon\" onClick={() => onCheckBtnClick(atodo.id)}>\r\n                        <CheckIcon primaryColor='#4fff4f' />\r\n                    </span>}>{atodo.name}</Buttonstyled>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Todo;","import React from 'react';\r\nimport Textfield from '@atlaskit/textfield';\r\nimport Button from '@atlaskit/button';\r\nimport Icon from '@atlaskit/icon';\r\nimport Todo from './Todo';\r\n\r\nfunction Todolist({ todoList, onCheckBtnClick }) {\r\n    return (\r\n        <>\r\n            {todoList.map(todo => (\r\n                <Todo key={todo.id} atodo={todo} onCheckBtnClick={onCheckBtnClick}/>\r\n            ))}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Todolist;","import './App.css';\nimport Todolist from './components/Todolist.js';\nimport Textfield from '@atlaskit/textfield';\nimport Button from '@atlaskit/button';\nimport { useCallback, useEffect, useState } from 'react';\nimport { v4 } from 'uuid';\n\nconst TODO_APP_Storage_key = 'TODO_APP';\n\nfunction App() {\n  // state: du lieu noi tai, pros:du lieu truyen tu element cha\n  const [todolist, setTodolist] = useState([]);\n  const [textinput, setTextinput] = useState(\"\");\n  useEffect(() => {\n    const storagedtodolist = localStorage.getItem(TODO_APP_Storage_key);\n    if (storagedtodolist){\n      setTodolist(JSON.parse(storagedtodolist));\n    }\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem(TODO_APP_Storage_key, JSON.stringify(todolist));\n  }, [todolist])\n\n\n\n  const onTextinputChange = useCallback((e) => {\n    setTextinput(e.target.value);\n  },[]);\n\n  const onAddBtnClick = useCallback((e) => {\n    // them gia tri text inputs vao DS todolist\n    setTodolist([{ id: v4(), name: textinput, isComplete: false },...todolist ]);\n    setTextinput('');\n  \n  },[textinput,todolist]);\n\n\n  const onCheckBtnClick = useCallback((id) => {\n    setTodolist(prevState => prevState.map(todo => todo.id === id?{...todo, isComplete: true}:todo));\n  },[]);\n\n  return (\n    <>\n      <h3 style={{width:\"600px\"}}>Danh sách cần làm</h3>\n      <Textfield\n        name=\"add-todo\"\n        placeholder=\"Thêm việc cần làm...\"\n        elemAfterInput={\n          <Button\n            isDisabled={!textinput}\n            appearance=\"primary\"\n            onClick={onAddBtnClick}\n          >Thêm\n          </Button>\n        }\n        css={{ padding: '2px 4px 2px' }}\n        value={textinput}\n        onChange={onTextinputChange}\n      ></Textfield>\n      <Todolist todoList={todolist} onCheckBtnClick={onCheckBtnClick}/>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}